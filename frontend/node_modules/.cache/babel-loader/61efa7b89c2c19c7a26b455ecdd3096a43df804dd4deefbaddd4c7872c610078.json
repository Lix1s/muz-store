{"ast":null,"code":"// authSlice.js\nimport { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nimport { instanceLocal, instanceMockAPI } from \"../../axios\"; // Импортируем два экземпляра\n\n// Аутентификация (для локального сервера)\nexport const fetchAuth = createAsyncThunk('auth/fetchAuth', async params => {\n  const {\n    data\n  } = await instanceLocal.post('/auth/login', params); // Используем instanceLocal для логина\n  return data;\n});\n\n// Регистрация (используем MockAPI)\nexport const fetchRegister = createAsyncThunk('auth/fetchRegister', async params => {\n  const {\n    data\n  } = await instanceMockAPI.post('/auth/register', params); // Используем instanceMockAPI для регистрации\n  return data;\n});\n\n// Получение данных о текущем пользователе (используем локальный сервер)\nexport const fetchAuthMe = createAsyncThunk('auth/fetchAuthMe', async () => {\n  const {\n    data\n  } = await instanceLocal.get('/auth/me'); // Используем instanceLocal для получения данных о пользователе\n  return data;\n});\nconst initialState = {\n  data: null,\n  status: 'loading'\n};\nconst authSlice = createSlice({\n  name: 'auth',\n  initialState,\n  reducers: {\n    logout: state => {\n      state.data = null;\n    }\n  },\n  extraReducers: builder => {\n    builder.addCase(fetchAuth.pending, state => {\n      state.status = 'loading';\n      state.data = null;\n    }).addCase(fetchAuth.fulfilled, (state, action) => {\n      state.status = 'loaded';\n      state.data = action.payload;\n    }).addCase(fetchAuth.rejected, state => {\n      state.status = 'error';\n      state.data = null;\n    }).addCase(fetchAuthMe.pending, state => {\n      state.status = 'loading';\n      state.data = null;\n    }).addCase(fetchAuthMe.fulfilled, (state, action) => {\n      state.status = 'loaded';\n      state.data = action.payload;\n    }).addCase(fetchAuthMe.rejected, state => {\n      state.status = 'error';\n      state.data = null;\n    }).addCase(fetchRegister.pending, state => {\n      state.status = 'loading';\n      state.data = null;\n    }).addCase(fetchRegister.fulfilled, (state, action) => {\n      state.status = 'loaded';\n      state.data = action.payload;\n    }).addCase(fetchRegister.rejected, state => {\n      state.status = 'error';\n      state.data = null;\n    });\n  }\n});\nexport const selectIsAuth = state => Boolean(state.auth.data);\nexport const authReducer = authSlice.reducer;\nexport const {\n  logout\n} = authSlice.actions;","map":{"version":3,"names":["createAsyncThunk","createSlice","instanceLocal","instanceMockAPI","fetchAuth","params","data","post","fetchRegister","fetchAuthMe","get","initialState","status","authSlice","name","reducers","logout","state","extraReducers","builder","addCase","pending","fulfilled","action","payload","rejected","selectIsAuth","Boolean","auth","authReducer","reducer","actions"],"sources":["C:/Users/lakir/Desktop/lastTry/frontend/src/redux/slices/auth.js"],"sourcesContent":["// authSlice.js\r\nimport { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\r\nimport { instanceLocal, instanceMockAPI } from \"../../axios\";  // Импортируем два экземпляра\r\n\r\n// Аутентификация (для локального сервера)\r\nexport const fetchAuth = createAsyncThunk('auth/fetchAuth', async (params) => {\r\n    const { data } = await instanceLocal.post('/auth/login', params);  // Используем instanceLocal для логина\r\n    return data;\r\n});\r\n\r\n// Регистрация (используем MockAPI)\r\nexport const fetchRegister = createAsyncThunk('auth/fetchRegister', async (params) => {\r\n    const { data } = await instanceMockAPI.post('/auth/register', params);  // Используем instanceMockAPI для регистрации\r\n    return data;\r\n});\r\n\r\n// Получение данных о текущем пользователе (используем локальный сервер)\r\nexport const fetchAuthMe = createAsyncThunk('auth/fetchAuthMe', async () => {\r\n    const { data } = await instanceLocal.get('/auth/me');  // Используем instanceLocal для получения данных о пользователе\r\n    return data;\r\n});\r\n\r\nconst initialState = {\r\n    data: null,\r\n    status: 'loading',\r\n};\r\n\r\nconst authSlice = createSlice({\r\n    name: 'auth',\r\n    initialState,\r\n    reducers: {\r\n        logout: (state) => {\r\n            state.data = null;\r\n        }\r\n    },\r\n    extraReducers: (builder) => {\r\n        builder\r\n        .addCase(fetchAuth.pending, (state) => {\r\n            state.status = 'loading';\r\n            state.data = null;\r\n        })\r\n        .addCase(fetchAuth.fulfilled, (state, action) => {\r\n            state.status = 'loaded';\r\n            state.data = action.payload;\r\n        })\r\n        .addCase(fetchAuth.rejected, (state) => {\r\n            state.status = 'error';\r\n            state.data = null;\r\n        })\r\n        .addCase(fetchAuthMe.pending, (state) => {\r\n            state.status = 'loading';\r\n            state.data = null;\r\n        })\r\n        .addCase(fetchAuthMe.fulfilled, (state, action) => {\r\n            state.status = 'loaded';\r\n            state.data = action.payload;\r\n        })\r\n        .addCase(fetchAuthMe.rejected, (state) => {\r\n            state.status = 'error';\r\n            state.data = null;\r\n        })\r\n        .addCase(fetchRegister.pending, (state) => {\r\n            state.status = 'loading';\r\n            state.data = null;\r\n        })\r\n        .addCase(fetchRegister.fulfilled, (state, action) => {\r\n            state.status = 'loaded';\r\n            state.data = action.payload;\r\n        })\r\n        .addCase(fetchRegister.rejected, (state) => {\r\n            state.status = 'error';\r\n            state.data = null;\r\n        });\r\n    },\r\n});\r\n\r\nexport const selectIsAuth = (state) => Boolean(state.auth.data);\r\n\r\nexport const authReducer = authSlice.reducer;\r\n\r\nexport const { logout } = authSlice.actions;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
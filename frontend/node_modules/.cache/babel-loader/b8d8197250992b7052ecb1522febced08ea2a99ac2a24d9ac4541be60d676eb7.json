{"ast":null,"code":"// // src/components/ProductForm.js\n// import React, { useState, useEffect } from 'react';\n// import { useNavigate, useParams } from 'react-router-dom';\n// import { createProduct, getProductById, updateProduct  } from '../../services/api';\n// const ProductForm = () => {\n//   const [formData, setFormData] = useState({\n//     title: '',\n//     category: '',\n//     price: '',\n//     imageUrl: '',\n//   });\n//   const navigate = useNavigate();\n//   const { id } = useParams();\n//   useEffect(() => {\n//     if (id) {\n//       const fetchProduct = async () => {\n//         try {\n//           const { data } = await getProductById(id);\n//           setFormData({\n//             title: data.title,\n//             category: data.category,\n//             price: data.price,\n//             imageUrl: data.imageUrl,\n//           });\n//         } catch (error) {\n//           console.error('Ошибка при получении продукта:', error);\n//         }\n//       };\n//       fetchProduct();\n//     }\n//   }, [id]);\n//   const handleChange = (e) => {\n//     const { name, value } = e.target;\n//     setFormData({\n//       ...formData,\n//       [name]: value,\n//     });\n//   };\n//   const handleSubmit = async (e) => {\n//     e.preventDefault();\n//     try {\n//       if (id) {\n//         await updateProduct(id, formData); // Если id существует, обновляем продукт\n//       } else {\n//         await createProduct(formData); // Если id нет, создаем новый продукт\n//       }\n//       navigate('/'); // Перенаправляем на страницу со списком продуктов\n//     } catch (error) {\n//       console.error('Ошибка при сохранении продукта:', error);\n//     }\n//   };\n//   return (\n//     <div>\n//       <h1>{id ? 'Редактировать продукт' : 'Добавить новый продукт'}</h1>\n//       <form onSubmit={handleSubmit}>\n//         <div>\n//           <label>Название:</label>\n//           <input type=\"text\" name=\"title\" value={formData.title} onChange={handleChange} required />\n//         </div>\n//         <div>\n//           <label>Категория:</label>\n//           <input type=\"text\" name=\"category\" value={formData.category} onChange={handleChange} required />\n//         </div>\n//         <div>\n//           <label>Цена:</label>\n//           <input type=\"number\" name=\"price\" value={formData.price} onChange={handleChange} required />\n//         </div>\n//         <div>\n//           <label>Изображение URL:</label>\n//           <input type=\"url\" name=\"imageUrl\" value={formData.imageUrl} onChange={handleChange} />\n//         </div>\n//         <button type=\"submit\">{id ? 'Обновить' : 'Добавить'}</button>\n//       </form>\n//     </div>\n//   );\n// };\n// export default ProductForm;","map":{"version":3,"names":[],"sources":["C:/Users/lakir/Desktop/lastTry/frontend/src/components/ProductForm/ProductForm.jsx"],"sourcesContent":["// // src/components/ProductForm.js\r\n// import React, { useState, useEffect } from 'react';\r\n// import { useNavigate, useParams } from 'react-router-dom';\r\n// import { createProduct, getProductById, updateProduct  } from '../../services/api';\r\n\r\n// const ProductForm = () => {\r\n//   const [formData, setFormData] = useState({\r\n//     title: '',\r\n//     category: '',\r\n//     price: '',\r\n//     imageUrl: '',\r\n//   });\r\n//   const navigate = useNavigate();\r\n//   const { id } = useParams();\r\n\r\n//   useEffect(() => {\r\n//     if (id) {\r\n//       const fetchProduct = async () => {\r\n//         try {\r\n//           const { data } = await getProductById(id);\r\n//           setFormData({\r\n//             title: data.title,\r\n//             category: data.category,\r\n//             price: data.price,\r\n//             imageUrl: data.imageUrl,\r\n//           });\r\n//         } catch (error) {\r\n//           console.error('Ошибка при получении продукта:', error);\r\n//         }\r\n//       };\r\n\r\n//       fetchProduct();\r\n//     }\r\n//   }, [id]);\r\n\r\n//   const handleChange = (e) => {\r\n//     const { name, value } = e.target;\r\n//     setFormData({\r\n//       ...formData,\r\n//       [name]: value,\r\n//     });\r\n//   };\r\n\r\n//   const handleSubmit = async (e) => {\r\n//     e.preventDefault();\r\n//     try {\r\n//       if (id) {\r\n//         await updateProduct(id, formData); // Если id существует, обновляем продукт\r\n//       } else {\r\n//         await createProduct(formData); // Если id нет, создаем новый продукт\r\n//       }\r\n//       navigate('/'); // Перенаправляем на страницу со списком продуктов\r\n//     } catch (error) {\r\n//       console.error('Ошибка при сохранении продукта:', error);\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <div>\r\n//       <h1>{id ? 'Редактировать продукт' : 'Добавить новый продукт'}</h1>\r\n//       <form onSubmit={handleSubmit}>\r\n//         <div>\r\n//           <label>Название:</label>\r\n//           <input type=\"text\" name=\"title\" value={formData.title} onChange={handleChange} required />\r\n//         </div>\r\n//         <div>\r\n//           <label>Категория:</label>\r\n//           <input type=\"text\" name=\"category\" value={formData.category} onChange={handleChange} required />\r\n//         </div>\r\n//         <div>\r\n//           <label>Цена:</label>\r\n//           <input type=\"number\" name=\"price\" value={formData.price} onChange={handleChange} required />\r\n//         </div>\r\n//         <div>\r\n//           <label>Изображение URL:</label>\r\n//           <input type=\"url\" name=\"imageUrl\" value={formData.imageUrl} onChange={handleChange} />\r\n//         </div>\r\n//         <button type=\"submit\">{id ? 'Обновить' : 'Добавить'}</button>\r\n//       </form>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default ProductForm;\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}